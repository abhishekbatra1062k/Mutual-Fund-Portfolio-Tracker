{
	"info": {
		"_postman_id": "cc26555c-f5c3-44da-9b44-dc887f10adbb",
		"name": "Bhive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38906832"
	},
	"item": [
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"abc@gmail.com\",\n  \"password\": \"abc@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/auth/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"abc@gmail.com\",\n  \"password\": \"abc@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/auth/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fund_List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.funds).to.be.an('array');",
							"    ",
							"    responseData.funds.forEach(function(fund) {",
							"        pm.expect(fund).to.have.property('Scheme_Code');",
							"        pm.expect(fund).to.have.property('ISIN_Div_Payout_ISIN_Growth');",
							"        pm.expect(fund).to.have.property('ISIN_Div_Reinvestment');",
							"        pm.expect(fund).to.have.property('Scheme_Name');",
							"        pm.expect(fund).to.have.property('Net_Asset_Value');",
							"        pm.expect(fund).to.have.property('Date');",
							"        pm.expect(fund).to.have.property('Scheme_Type');",
							"        pm.expect(fund).to.have.property('Scheme_Category');",
							"        pm.expect(fund).to.have.property('Mutual_Fund_Family');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Date is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  responseData.funds.forEach(function(fund) {",
							"    pm.expect(fund.Date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Net_Asset_Value is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.funds).to.be.an('array');",
							"    responseData.funds.forEach(function(fund) {",
							"        pm.expect(fund.Net_Asset_Value).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Funds array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.funds).to.exist.and.to.be.an('array').with.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/funds/list?fund_family=HDFC Mutual Fund",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"funds",
						"list"
					],
					"query": [
						{
							"key": "fund_family",
							"value": "HDFC Mutual Fund"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio_View",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - fund_name, units, and purchase_price\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.portfolio).to.be.an('array');",
							"    ",
							"    responseData.portfolio.forEach(function(item) {",
							"        pm.expect(item).to.have.property('fund_name');",
							"        pm.expect(item).to.have.property('units');",
							"        pm.expect(item).to.have.property('purchase_price');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Units and purchase_price are non-negative numbers\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.portfolio).to.be.an('array');",
							"  ",
							"  responseData.portfolio.forEach(function(item) {",
							"    pm.expect(item.units).to.be.at.least(0);",
							"    pm.expect(item.purchase_price).to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Portfolio array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.portfolio).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/portfolio/view?user_id=1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"portfolio",
						"view"
					],
					"query": [
						{
							"key": "user_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Portfolio_Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and portfolio\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('portfolio');",
							"});",
							"",
							"",
							"pm.test(\"Fund name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.portfolio.fund_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Units is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.portfolio.units).to.be.a('number');",
							"  pm.expect(responseData.portfolio.units).to.be.at.least(0, \"Units should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Purchase price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.portfolio.purchase_price).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/portfolio/update?user_id=1&fund_name=HDFC Corporate Bond Fund - Quarterly IDCW Option&units=1000&purchase_price=10",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"portfolio",
						"update"
					],
					"query": [
						{
							"key": "user_id",
							"value": "1"
						},
						{
							"key": "fund_name",
							"value": "HDFC Corporate Bond Fund - Quarterly IDCW Option"
						},
						{
							"key": "units",
							"value": "1000"
						},
						{
							"key": "purchase_price",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	]
}